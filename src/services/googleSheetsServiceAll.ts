import { supabase } from '../config/supabase';

export interface ChinaOrderDataAll {
  user_id: string;
  order_number?: string;
  option_id?: string;
  china_order_number?: string;
  date?: string;
  item_name?: string;
  option_name?: string;
  barcode?: string;
  order_qty?: number;
  china_option1?: string;
  china_option2?: string;
  china_price?: number;
  china_total_price?: number;
  img_url?: string;
  china_link?: string;
  order_status_ordering?: number;
  note?: string;
  confirm_order_id?: string;
  confirm_shipment_id?: string;
  composition?: string;
  order_status_import?: number;
  order_status_cancel?: number;
  order_status_shipment?: number;
  sheet_name?: string;
  id: string;
  shipment_info?: string;
}

/**
 * ÏãúÌä∏ Ïù¥Î¶ÑÏùÑ ÏΩîÎìúÎ°ú Î≥ÄÌôò
 */
const getSheetCode = (sheetName: string): string => {
  const sheetCodeMap: { [key: string]: string } = {
    'Ïã†Í∑ú': 'N',
    'Í≤∞Ï†ú': 'P',
    'ÏßÑÌñâ': 'O',
    'Ï∑®ÏÜå': 'C',
    'Ï∂úÍ≥†': 'D'
  };
  return sheetCodeMap[sheetName] || 'N';
};

/**
 * Íµ¨Í∏Ä ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞Î•º SupabaseÏóê Ï†ÄÏû•
 */
export const importGoogleSheetsDataAll = async (userId: string): Promise<{success: boolean, error?: string}> => {
  try {
    console.log('üìä Íµ¨Í∏Ä ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë...');

    // Î∞±ÏóîÎìú API Ìò∏Ï∂úÌïòÏó¨ Íµ¨Í∏Ä ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';
    const response = await fetch(`${backendUrl}/api/googlesheets/import-data-all`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ user_id: userId })
    });

    if (!response.ok) {
      const errorData = await response.json();
      return { success: false, error: errorData.message || 'Î∞±ÏóîÎìú API Ìò∏Ï∂ú Ïã§Ìå®' };
    }

    const data = await response.json();

    // Î∞±ÏóîÎìúÏóêÏÑú Ïù¥ÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º Ï≤òÎ¶¨ÌñàÎã§Î©¥ ÏÑ±Í≥µ Î∞òÌôò
    if (data.success) {
      console.log('‚úÖ Íµ¨Í∏Ä ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏÑ±Í≥µ');
      return { success: true };
    }

    // ÎßåÏïΩ Î∞±ÏóîÎìúÏóêÏÑú Îç∞Ïù¥ÌÑ∞Îßå Î∞òÌôòÌïúÎã§Î©¥ Ïó¨Í∏∞ÏÑú Ï≤òÎ¶¨
    if (data.sheets) {
      console.log('üîÑ SupabaseÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏãúÏûë...');

      // 1. Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
      const { error: deleteError } = await supabase
        .from('chinaorder_googlesheet_all')
        .delete()
        .eq('user_id', userId);

      if (deleteError) {
        console.error('‚ùå Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ïã§Ìå®:', deleteError);
        return { success: false, error: `Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ïã§Ìå®: ${deleteError.message}` };
      }

      console.log('‚úÖ Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å');

      // 2. ÏãúÌä∏Î≥ÑÎ°ú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Î∞è ÏÇΩÏûÖ
      const sheetNames = ['Ïã†Í∑ú', 'Í≤∞Ï†ú', 'ÏßÑÌñâ', 'Ï∑®ÏÜå', 'Ï∂úÍ≥†'];
      let totalInserted = 0;

      for (const sheetName of sheetNames) {
        const sheetData = data.sheets[sheetName];
        if (!sheetData || sheetData.length === 0) {
          console.log(`‚ö†Ô∏è ${sheetName} ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå`);
          continue;
        }

        console.log(`üìù ${sheetName} ÏãúÌä∏ Ï≤òÎ¶¨ Ï§ë... (${sheetData.length}Ìñâ)`);

        const sheetCode = getSheetCode(sheetName);
        const businessCode = sheetData[0]?.businessCode || 'HI'; // B1 ÏÖÄÏùò ÏÇ¨ÏóÖÏûê ÏΩîÎìú

        // Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
        const insertData: ChinaOrderDataAll[] = sheetData.map((row: any, index: number) => {
          const rowNumber = index + 1;
          const id = `${businessCode}-${sheetCode}-${rowNumber}`;

          return {
            id,
            user_id: userId,
            order_number: row.order_number || '',
            option_id: row.option_id || '',
            china_order_number: row.china_order_number || '',
            date: row.date || '',
            item_name: row.item_name || '',
            option_name: row.option_name || '',
            barcode: row.barcode || '',
            order_qty: parseInt(row.order_qty) || 0,
            china_option1: row.china_option1 || '',
            china_option2: row.china_option2 || '',
            china_price: parseFloat(row.china_price) || 0,
            china_total_price: parseFloat(row.china_total_price) || 0,
            img_url: row.img_url || '',
            china_link: row.china_link || '',
            order_status_ordering: parseInt(row.order_status_ordering) || 0,
            note: row.note || '',
            confirm_order_id: row.confirm_order_id || '',
            confirm_shipment_id: row.confirm_shipment_id || '',
            composition: row.composition || '',
            order_status_import: parseInt(row.order_status_import) || 0,
            order_status_cancel: parseInt(row.order_status_cancel) || 0,
            order_status_shipment: parseInt(row.order_status_shipment) || 0,
            sheet_name: sheetCode,
            shipment_info: row.shipment_info || ''
          };
        });

        // Î∞∞ÏπòÎ°ú ÏÇΩÏûÖ (500Í∞úÏî©)
        const BATCH_SIZE = 500;
        for (let i = 0; i < insertData.length; i += BATCH_SIZE) {
          const batch = insertData.slice(i, i + BATCH_SIZE);

          const { error: insertError } = await supabase
            .from('chinaorder_googlesheet_all')
            .insert(batch);

          if (insertError) {
            console.error(`‚ùå ${sheetName} Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ïã§Ìå®:`, insertError);
            return { success: false, error: `${sheetName} Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ïã§Ìå®: ${insertError.message}` };
          }

          totalInserted += batch.length;
          console.log(`‚úÖ ${sheetName} Î∞∞Ïπò ÏÇΩÏûÖ ÏôÑÎ£å (${i + batch.length}/${insertData.length})`);
        }
      }

      console.log(`‚úÖ Ï¥ù ${totalInserted}Í∞ú Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏôÑÎ£å`);
      return { success: true };
    }

    return { success: false, error: 'Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.' };

  } catch (error: any) {
    console.error('‚ùå Íµ¨Í∏Ä ÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
    return { success: false, error: `Ïò§Î•ò Î∞úÏÉù: ${error.message}` };
  }
};
